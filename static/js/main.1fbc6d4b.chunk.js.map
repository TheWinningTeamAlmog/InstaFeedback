{"version":3,"sources":["App.js","serviceWorker.js","index.js","instagram-logo-white.png"],"names":["avatars","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","usernameChanged","asyncToGenerator","regenerator_default","a","mark","_callee","username","resp","pageHtml","imagesRegexMatch","recheckUsername","profilePicString","profilePic","wrap","_context","prev","next","setState","isLoading","document","getElementById","value","fetch","concat","sent","ok","trim","mainImage","logo","usernameError","abrupt","text","match","Array","isArray","length","slice","stop","readFile","file","files","reader","FileReader","addEventListener","uploadedImageB64","result","readAsDataURL","submit","_callee2","respJson","_context2","loadingAPI","method","headers","Content-Type","body","JSON","stringify","fileBase64","state","split","join","user","json","comments","likes","img","_this2","Number","isInteger","sort","Math","random","react_default","createElement","className","src","alt","style","marginTop","maxHeight","maxWidth","window","innerWidth","Comment","Group","textAlign","Header","as","color","Menu","compact","Item","Icon","name","Label","floating","abbreviate","Avatar","toLowerCase","Content","Author","Metadata","Text","width","height","href","target","rel","borderRadius","onLoad","Form","autoComplete","Input","error","id","loading","placeholder","onChange","accept","type","Button","onClick","disabled","Component","Boolean","location","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.1fbc6d4b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./instagram-logo-white.png\";\nimport \"./App.css\";\nimport {\n  Form,\n  Button,\n  Comment,\n  Header,\n  Label,\n  Icon,\n  Menu\n} from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport abbreviate from \"number-abbreviate\";\n\nlet avatars = [\n  \"Ade\",\n  \"Christian\",\n  \"Daniel\",\n  \"Elliot\",\n  \"Helen\",\n  \"Jenny\",\n  \"Joe\",\n  \"Justen\",\n  \"Laura\",\n  \"Matt\",\n  \"Nan\",\n  \"Steve\",\n  \"Stevie\",\n  \"Tom\",\n  \"Veronika\",\n  \"Zoe\"\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      mainImage: logo\n    };\n  }\n  usernameChanged = async () => {\n    this.setState({ isLoading: true });\n\n    const username = document.getElementById(\"input-username\").value;\n\n    const resp = await fetch(`https://www.instagram.com/${username}/`);\n\n    if (!resp.ok || username.trim() === \"\") {\n      this.setState({\n        isLoading: false,\n        mainImage: logo,\n        usernameError: true\n      });\n      return;\n    }\n\n    const pageHtml = await resp.text();\n\n    const imagesRegexMatch = pageHtml.match(/\"https:\\/\\/.+?\\.jpg\\?.+?\"/g);\n\n    const recheckUsername = document.getElementById(\"input-username\").value;\n    if (username !== recheckUsername) {\n      return;\n    }\n\n    this.setState({ username });\n\n    if (Array.isArray(imagesRegexMatch) && imagesRegexMatch.length > 0) {\n      const profilePicString = imagesRegexMatch[0];\n      const profilePic = profilePicString.slice(1, profilePicString.length - 1);\n\n      this.setState({\n        mainImage: profilePic,\n        usernameError: false\n      });\n    }\n  };\n\n  readFile = () => {\n    const file = document.getElementById(\"file-upload\").files[0];\n\n    if (!file) {\n      return;\n    }\n\n    const reader = new FileReader();\n\n    reader.addEventListener(\n      \"load\",\n      () => {\n        this.setState({ uploadedImageB64: reader.result });\n      },\n      false\n    );\n\n    reader.readAsDataURL(file);\n  };\n\n  submit = async () => {\n    this.setState({ loadingAPI: true });\n\n    const resp = await fetch(\n      \"https://eu-gb.functions.cloud.ibm.com/api/v1/web/shmueljacobs%40gmail.com_dev/default/GuessData.json\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          fileBase64: this.state.uploadedImageB64\n            .split(\",\")\n            .slice(1)\n            .join(\",\"),\n          user: this.state.username\n        })\n      }\n    );\n\n    const respJson = await resp.json();\n\n    this.setState({ comments: respJson.comments, likes: respJson.likes });\n  };\n\n  render() {\n    let body;\n\n    if (\n      Array.isArray(this.state.comments) &&\n      Number.isInteger(this.state.likes)\n    ) {\n      avatars = avatars.sort(() => 0.5 - Math.random());\n\n      body = (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>InstaFeedback</h1>\n            <img\n              src={this.state.uploadedImageB64}\n              alt=\"logo\"\n              style={{\n                marginTop: \"10px\",\n                maxHeight: \"600px\",\n                maxWidth: `${window.innerWidth - 10}px`\n              }}\n            />\n            <Comment.Group style={{ textAlign: \"initial\" }}>\n              <Header as=\"h3\" style={{ color: \"white\" }}>\n                <Menu compact>\n                  <Menu.Item as=\"a\">\n                    <Icon name=\"comments\" /> Comments\n                    <Label color=\"red\" floating>\n                      3\n                    </Label>\n                  </Menu.Item>\n                  <Menu.Item as=\"a\">\n                    <Icon name=\"heart\" /> Likes\n                    <Label color=\"teal\" floating>\n                      {abbreviate(this.state.likes, 1)}\n                    </Label>\n                  </Menu.Item>\n                </Menu>\n              </Header>\n\n              <Comment>\n                <Comment.Avatar\n                  src={`https://react.semantic-ui.com/images/avatar/small/${avatars[0].toLowerCase()}.jpg`}\n                />\n                <Comment.Content>\n                  <Comment.Author style={{ color: \"white\" }} as=\"a\">\n                    {avatars[0]}\n                  </Comment.Author>\n                  <Comment.Metadata style={{ color: \"lightgrey\" }}>\n                    <div>Today at 5:42PM</div>\n                  </Comment.Metadata>\n                  <Comment.Text style={{ color: \"white\" }}>\n                    {this.state.comments[0]}\n                  </Comment.Text>\n                </Comment.Content>\n              </Comment>\n\n              <Comment>\n                <Comment.Avatar\n                  src={`https://react.semantic-ui.com/images/avatar/small/${avatars[1].toLowerCase()}.jpg`}\n                />\n                <Comment.Content>\n                  <Comment.Author style={{ color: \"white\" }} as=\"a\">\n                    {avatars[1]}\n                  </Comment.Author>\n                  <Comment.Metadata style={{ color: \"lightgrey\" }}>\n                    <div>Yesterday at 12:30AM</div>\n                  </Comment.Metadata>\n                  <Comment.Text style={{ color: \"white\" }}>\n                    {this.state.comments[1]}\n                  </Comment.Text>\n                </Comment.Content>\n              </Comment>\n\n              <Comment>\n                <Comment.Avatar\n                  src={`https://react.semantic-ui.com/images/avatar/small/${avatars[2].toLowerCase()}.jpg`}\n                />\n                <Comment.Content>\n                  <Comment.Author style={{ color: \"white\" }} as=\"a\">\n                    {avatars[2]}\n                  </Comment.Author>\n                  <Comment.Metadata style={{ color: \"lightgrey\" }}>\n                    <div>5 days ago</div>\n                  </Comment.Metadata>\n                  <Comment.Text style={{ color: \"white\" }}>\n                    {this.state.comments[2]}\n                  </Comment.Text>\n                </Comment.Content>\n              </Comment>\n            </Comment.Group>\n          </header>\n        </div>\n      );\n    } else {\n      let img;\n      if (this.state.mainImage === logo) {\n        img = (\n          <img\n            src={this.state.mainImage}\n            alt=\"logo\"\n            style={{\n              marginTop: \"10px\",\n              width: \"155px\",\n              height: \"155px\"\n            }}\n          />\n        );\n      } else {\n        img = (\n          <a\n            href={`https://www.instagram.com/${this.state.username}/`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <img\n              src={this.state.mainImage}\n              alt=\"logo\"\n              style={{\n                marginTop: \"10px\",\n                width: \"155px\",\n                height: \"155px\",\n                borderRadius: \"50%\"\n              }}\n              onLoad={() => this.setState({ isLoading: false })}\n            />\n          </a>\n        );\n      }\n\n      body = (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            {img}\n            <h1>InstaFeedback</h1>\n            <Form autoComplete=\"off\">\n              <Form.Input\n                error={this.state.usernameError}\n                style={{ width: \"300px\" }}\n                id=\"input-username\"\n                loading={this.state.isLoading}\n                placeholder=\"Username\"\n                onChange={this.usernameChanged}\n              />\n              <input\n                id=\"file-upload\"\n                accept=\"image/*\"\n                type=\"file\"\n                onChange={this.readFile}\n              />\n              <Button\n                loading={this.state.loadingAPI}\n                onClick={this.submit}\n                style={{ marginTop: \"10px\" }}\n                disabled={\n                  !this.state.uploadedImageB64 ||\n                  !this.state.username ||\n                  this.state.usernameError\n                }\n              >\n                Submit\n              </Button>\n            </Form>\n          </header>\n        </div>\n      );\n    }\n    return body;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/instagram-logo-white.9cbd1bc7.png\";"],"sourceRoot":""}