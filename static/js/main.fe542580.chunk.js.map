{"version":3,"sources":["App.js","serviceWorker.js","index.js","instagram-logo-balck-white.png"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","usernameChanged","asyncToGenerator","regenerator_default","a","mark","_callee","username","resp","pageHtml","imagesRegexMatch","usernameAgain","profilePicString","profilePic","wrap","_context","prev","next","setState","isLoading","document","getElementById","value","fetch","concat","sent","ok","trim","mainImage","logo","abrupt","text","match","Array","isArray","length","slice","stop","state","react_default","createElement","className","id","src","alt","style","marginTop","width","height","filter","undefined","borderRadius","Form","autoComplete","Input","loading","placeholder","onChange","Button","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oVAiFeA,sBA1Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,gBAPmBN,OAAAO,EAAA,EAAAP,CAAAQ,EAAAC,EAAAC,KAOD,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAV,EAAAC,EAAAU,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAChBvB,EAAKwB,SAAS,CAAEC,WAAW,IAErBZ,EAAWa,SAASC,eAAe,kBAAkBC,MAH3CP,EAAAE,KAAA,EAKGM,MAAK,6BAAAC,OAA8BjB,EAA9B,MALR,WAKVC,EALUO,EAAAU,MAONC,IAA0B,KAApBnB,EAASoB,OAPT,CAAAZ,EAAAE,KAAA,eAQdvB,EAAKwB,SAAS,CAAEC,WAAW,EAAOS,UAAWC,MAR/Bd,EAAAe,OAAA,wBAAAf,EAAAE,KAAA,GAYOT,EAAKuB,OAZZ,WAYVtB,EAZUM,EAAAU,KAcVf,EAAmBD,EAASuB,MAAM,8BAElCrB,EAAgBS,SAASC,eAAe,kBAAkBC,MAC5Df,IAAaI,EAjBD,CAAAI,EAAAE,KAAA,gBAAAF,EAAAe,OAAA,kBAqBZG,MAAMC,QAAQxB,IAAqBA,EAAiByB,OAAS,IACzDvB,EAAmBF,EAAiB,GACpCG,EAAaD,EAAiBwB,MAAM,EAAGxB,EAAiBuB,OAAS,GAEvEzC,EAAKwB,SAAS,CACZU,UAAWf,KAIfnB,EAAKwB,SAAS,CAAEC,WAAW,IA9BX,yBAAAJ,EAAAsB,SAAA/B,MALhBZ,EAAK4C,MAAQ,CACXnB,WAAW,EACXS,UAAWC,KAJInC,wEAyCjB,OACE6C,EAAAnC,EAAAoC,cAAA,OAAKC,UAAU,OACbF,EAAAnC,EAAAoC,cAAA,UAAQC,UAAU,cAChBF,EAAAnC,EAAAoC,cAAA,OACEE,GAAG,aACHC,IAAK9C,KAAKyC,MAAMV,UAChBgB,IAAI,OACJC,MAAO,CACLC,UAAW,OACXC,MAAO,QACPC,OAAQ,QACRC,OACEpD,KAAKyC,MAAMV,YAAcC,IAAO,oBAAiBqB,EACnDC,aAActD,KAAKyC,MAAMV,YAAcC,SAAOqB,EAAY,SAG9DX,EAAAnC,EAAAoC,cAAA,2BACAD,EAAAnC,EAAAoC,cAACY,EAAA,EAAD,CAAMC,aAAa,OACjBd,EAAAnC,EAAAoC,cAACY,EAAA,EAAKE,MAAN,CACET,MAAO,CAAEE,MAAO,SAChBL,GAAG,iBACHa,QAAS1D,KAAKyC,MAAMnB,UACpBqC,YAAY,WACZC,SAAU5D,KAAKI,kBAEjBsC,EAAAnC,EAAAoC,cAACkB,EAAA,EAAD,yBAnEMC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/B,MACvB,2DCZNgC,IAASC,OAAO1B,EAAAnC,EAAAoC,cAAC0B,EAAD,MAAS9C,SAASC,eAAe,SD2H3C,kBAAmB8C,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.fe542580.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./instagram-logo-balck-white.png\";\nimport \"./App.css\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      mainImage: logo\n    };\n  }\n  usernameChanged = async () => {\n    this.setState({ isLoading: true });\n\n    const username = document.getElementById(\"input-username\").value;\n\n    const resp = await fetch(`https://www.instagram.com/${username}/`);\n\n    if (!resp.ok || username.trim() === \"\") {\n      this.setState({ isLoading: false, mainImage: logo });\n      return;\n    }\n\n    const pageHtml = await resp.text();\n\n    const imagesRegexMatch = pageHtml.match(/\"https:\\/\\/.+?\\.jpg\\?.+?\"/g);\n\n    const usernameAgain = document.getElementById(\"input-username\").value;\n    if (username !== usernameAgain) {\n      return;\n    }\n\n    if (Array.isArray(imagesRegexMatch) && imagesRegexMatch.length > 0) {\n      const profilePicString = imagesRegexMatch[0];\n      const profilePic = profilePicString.slice(1, profilePicString.length - 1);\n\n      this.setState({\n        mainImage: profilePic\n      });\n    }\n\n    this.setState({ isLoading: false });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img\n            id=\"main-image\"\n            src={this.state.mainImage}\n            alt=\"logo\"\n            style={{\n              marginTop: \"10px\",\n              width: \"155px\",\n              height: \"155px\",\n              filter:\n                this.state.mainImage === logo ? \"invert(100%)\" : undefined,\n              borderRadius: this.state.mainImage === logo ? undefined : \"50%\"\n            }}\n          />\n          <h1>InstaFeedback</h1>\n          <Form autoComplete=\"off\">\n            <Form.Input\n              style={{ width: \"300px\" }}\n              id=\"input-username\"\n              loading={this.state.isLoading}\n              placeholder=\"Username\"\n              onChange={this.usernameChanged}\n            />\n            <Button>Submit</Button>\n          </Form>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/instagram-logo-balck-white.7ea7582b.png\";"],"sourceRoot":""}